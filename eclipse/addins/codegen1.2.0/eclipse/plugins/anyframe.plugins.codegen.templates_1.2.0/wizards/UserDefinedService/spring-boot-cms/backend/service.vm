#set($domain_cap = "$domainClass")
#set($domain_uncap = "$domain_cap.substring(0,1).toLowerCase()$domain_cap.substring(1)")
#set($repositoryFile_uncap = "$repositoryFile.substring(0,1).toLowerCase()$repositoryFile.substring(1)")
#set($serviceClass_uncap = "$serviceClass.substring(0,1).toLowerCase()$serviceClass.substring(1)")
#set($tableName = $model.name)
#set($queryName = $tableName.replaceAll("_",""))
#set($queryName = "$queryName.substring(0,1).toUpperCase()$queryName.substring(1).toLowerCase()")
#set($pks = $model.primaryKeys)
#set($pk = $listTool.get($pks, 0))
#set($pk_cap = $pk.javaName)
#set($pk_uncap = $pk.fieldName)
#foreach( $item in $primaryKey.split(":") )
#set($ret = $pk_cap.add("$item.substring(0,1).toUpperCase()$item.substring(1).toLowerCase()"))
#set($ret = $pk_uncap.add($item))
#end
##===================================
#if(${servicePackage_package} != "")
package ${servicePackage_package};
#end

import lombok.extern.slf4j.Slf4j;
import lombok.RequiredArgsConstructor;
import me.huneea.springbootcms.common.exception.DataNotFoundException;
import ${domainPackage_package}.${domain_cap};
import ${domainPackage_package}.${repositoryFile};
import ${dtoPackage_package}.${createDtoFile};
import ${dtoPackage_package}.${responseFile};
import ${dtoPackage_package}.${searchDtoFile};
import ${dtoPackage_package}.${updateDtoFile};
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Slf4j
@Service
@Transactional
@RequiredArgsConstructor
public class ${serviceClass} {

    private final ${repositoryFile} ${repositoryFile_uncap};

    public ${responseFile} create${domainClass}(${createDtoFile} request) {
        ${domainClass} ${domain_uncap} = ${repositoryFile_uncap}.save(request.to${domainClass}());
        return ${responseFile}.of(${domain_uncap});
    }

    @Transactional(readOnly = true)
    public Page<${responseFile}> findPaged${domainClass}s(${searchDtoFile} searchCondition, Pageable pageable) {
        return ${repositoryFile_uncap}.findPagedDatas(searchCondition, pageable)
                .map(${responseFile}::of);
    }

    public ${domainClass} find${domainClass}(Long id) {
        return ${repositoryFile_uncap}.findById(id)
                .orElseThrow(() -> new DataNotFoundException(Role.class, id));
    }

    public ${domainClass} update${domainClass}(Long id, Update${domainClass}Request request) {
        return ${repositoryFile_uncap}.findById(id)
            .map(${domain_uncap} -> {
                ${domain_uncap}.update(request.to${domainClass}());
                return ${domain_uncap};
            })
            .orElseGet(() -> {
                ${domainClass} new${domainClass} = request.to${domainClass}(id);
                return ${repositoryFile_uncap}.save(new${domainClass});
            });
    }

    public void delete${domainClass}(Long id) {
        ${repositoryFile_uncap}.deleteById(id);
    }

}