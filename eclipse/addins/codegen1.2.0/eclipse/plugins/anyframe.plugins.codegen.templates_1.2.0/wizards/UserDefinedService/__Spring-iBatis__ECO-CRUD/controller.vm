#set($domain_cap = "$domainClass")
#set($domain_uncap = "$domain_cap.substring(0,1).toLowerCase()$domain_cap.substring(1)")
#set($namespace = $domainClass.replaceAll("VO",""))
#set($namespace = "$namespace.toLowerCase()")
#set($service_cap = "$serviceClass")
#set($service_uncap = "$service_cap.substring(0,1).toLowerCase()$service_cap.substring(1)")
#set($tableName = $model.name)
#set($queryName = $tableName.replaceAll("_",""))
#set($queryName = "$queryName.substring(0,1).toUpperCase()$queryName.substring(1).toLowerCase()")
#set($pks = $model.primaryKeys)
#set($pk = $listTool.get($pks, 0))
#set($pk_cap = $pk.javaName)
#set($pk_uncap = $pk.fieldName)
#foreach( $item in $primaryKey.split(":") )
	#set($ret = $pk_cap.add("$item.substring(0,1).toUpperCase()$item.substring(1).toLowerCase()"))
	#set($ret = $pk_uncap.add($item))
#end
#if(${actionsPackage_package} != "")
package ${actionsPackage_package};
#end

import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.time.FastDateFormat;
import org.apache.commons.lang.xwork.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.RedirectView;

import com.eco.aop.LoginCheck;
import com.eco.aop.Menu;
import com.eco.controller.common.AdminSession;
import com.eco.dao.common.SimpleCriteria;
import ${servicePackage_package}.${service_cap};
import ${domainPackage_package}.${namespace}.${domain_cap};

/**
 * 업   무   명 :
 * 프로그램 ID : ${controllerClass}.java
 * 프로그램 명 : 
 * 개       요 : 
 * 작   성   자 : ${writerName}
 * 작   성   일 : ${writeDate}
 *
 *   수정일       수정자                              수정내용
 * ---------   --------   --------------------------------------------------------
 *
 * Copyright(c) 2012 DAEYOON Co. Ltd. All rights reserved.
 */

@Controller
public class ${controllerClass} {
	private Logger logger = Logger.getLogger(this.getClass());
	
	@Resource(name = "${service_uncap}")
	private $service_cap $service_uncap;
	
	/**
	 * 리스트페이지
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "${requestPath}/list.do")
	public ModelAndView listHandler(HttpServletRequest request, HttpServletResponse response, 
			@RequestParam(required=false) Integer page) throws Exception {
		if (page == null || page == 0) {
			page = 1;
		}
		ModelAndView result = new ModelAndView("${namespace}/list");
		SimpleCriteria<String> cri = new SimpleCriteria<String>();

		Map<String, Object> condition = cri.getCondition();
		if (condition == null) {
			condition = new HashMap<String, Object>();
		}
		
		cri.setCondition(condition);
		cri.setPageNum(page);
		cri.setPageCnt(10);
		cri.setPageNavCount(10);

		result.addObject("list", ${service_uncap}.list(cri));
		return result;
	}
	
	/**
	 * 입력폼 페이지
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "${requestPath}/register.do", method = RequestMethod.GET)
	public ModelAndView registerFormHandler(HttpServletRequest request, HttpServletResponse response,
			@RequestParam(required=false) Integer page) throws Exception {
		ModelAndView result = new ModelAndView("${namespace}/register");
		
		return result;
	}

	/**
	 * 입력처리
	 * @param request
	 * @param response
	 * @param session
	 * @param vo
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "${requestPath}/register.do", method = RequestMethod.POST)
	public ModelAndView registerHandler(HttpServletRequest request, HttpServletResponse response, ${domain_cap} vo) throws Exception {
		
		StringBuffer url = new StringBuffer();
		url.append(request.getContextPath());
		url.append("${requestPath}/list.do");
		url.append("?page=1");

		ModelAndView result = new ModelAndView(new RedirectView(url.toString()));

		${service_uncap}.create(vo);

		return result;
	}

	/**
	 * 수정화면 페이지
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "${requestPath}/modify.do", method = RequestMethod.GET)
	public ModelAndView modifyFormHandler(HttpServletRequest request, HttpServletResponse response, ${domain_cap} vo,
			@RequestParam(required=false) Integer page) throws Exception {

		ModelAndView result = new ModelAndView("${namespace}/modify");

		${domain_cap} ${domain_uncap} = ${service_uncap}.read(vo);
		
		result.addObject("model", ${domain_uncap});
		return result;
	}

	/**
	 * 수정처리
	 * @param request
	 * @param response
	 * @param session
	 * @param vo
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "${requestPath}/modify.do", method = RequestMethod.POST)
	public ModelAndView modifyHandler(HttpServletRequest request, HttpServletResponse response, ${domain_cap} vo) throws Exception {
		
		StringBuffer url = new StringBuffer();
		url.append(request.getContextPath());
		url.append("${requestPath}/list.do");
		url.append("?page=1");

		ModelAndView result = new ModelAndView(new RedirectView(url.toString()));

		${service_uncap}.update(vo);

		return result;
	}

	/**
	 * 삭제처리
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "${requestPath}/delete.do")
	public ModelAndView deleteHandler(HttpServletRequest request, HttpServletResponse response, ${domain_cap} vo) throws Exception {
		StringBuffer url = new StringBuffer();
		url.append(request.getContextPath());
		url.append("${requestPath}/list.do");
		url.append("?page=1");

		ModelAndView result = new ModelAndView(new RedirectView(url.toString()));
		
		${service_uncap}.delete(vo);

		return result;
	}
}
