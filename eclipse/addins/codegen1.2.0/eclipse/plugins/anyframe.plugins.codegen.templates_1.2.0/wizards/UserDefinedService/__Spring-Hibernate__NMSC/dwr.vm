#set($domain_cap = "$domainClass")
#set($domain_uncap = "$domain_cap.substring(0,1).toLowerCase()$domain_cap.substring(1)")
#set($domainSearchVO_cap = "$domainSearchVoClass")
#set($domainSearchVO_uncap = "$domainSearchVO_cap.substring(0,1).toLowerCase()$domainSearchVO_cap.substring(1)")
#set($service_cap = "$serviceClass")
#set($service_uncap = "$service_cap.substring(0,1).toLowerCase()$service_cap.substring(1)")
#set($tableName = $model.name)
#set($queryName = $tableName.replaceAll("_",""))
#set($queryName = "$queryName.substring(0,1).toUpperCase()$queryName.substring(1).toLowerCase()")
#set($pks = $model.primaryKeys)
#set($pk = $listTool.get($pks, 0))
#set($pk_cap = $pk.javaName)
#set($pk_uncap = $pk.fieldName)
#foreach( $item in $primaryKey.split(":") )
	#set($ret = $pk_cap.add("$item.substring(0,1).toUpperCase()$item.substring(1).toLowerCase()"))
	#set($ret = $pk_uncap.add($item))
#end

#if(${dwrPackage_package} != "")
package ${dwrPackage_package};
#end

import java.util.Calendar;

import javax.servlet.http.HttpServletRequest;

import kr.go.nmsc.domain.UsrMngr;
import ${domainPackage_package}.${domain_cap};
import ${servicePackage_package}.${serviceClass};

import org.apache.commons.lang.time.FastDateFormat;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.directwebremoting.WebContextFactory;
import org.directwebremoting.annotations.RemoteMethod;
import org.directwebremoting.annotations.RemoteProxy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
@RemoteProxy(name = "${dwrClass}")
public class ${dwrClass} {
	private static final Log logger = LogFactory.getLog(${dwrClass}.class);
	private static final FastDateFormat fdfDate = FastDateFormat.getInstance("yyyyMMdd");
	private static final FastDateFormat fdfTime = FastDateFormat.getInstance("HHmmss");

	@Autowired
	private ${service_cap} ${service_uncap};

	@RemoteMethod
	public Integer insert${domainClass}(${domainClass} ${domain_uncap}) throws Exception {
		HttpServletRequest request = WebContextFactory.get().getHttpServletRequest();
		UsrMngr managerSession = (UsrMngr) request.getSession().getAttribute("managerSession");
		String RG_K_IP = request.getRemoteAddr();
		String RG_D = fdfDate.format(Calendar.getInstance());
		String RG_TM = fdfTime.format(Calendar.getInstance());

		${domain_uncap}.setRG_K_SEQ_N(managerSession.getMNGR_SEQ_N());
		${domain_uncap}.setRG_D(RG_D);
		${domain_uncap}.setRG_TM(RG_TM);
		${domain_uncap}.setRG_K_IP(RG_K_IP);
		${domain_uncap}.setMDF_K_SEQ_N(managerSession.getMNGR_SEQ_N());
		${domain_uncap}.setMDF_D(RG_D);
		${domain_uncap}.setMDF_TM(RG_TM);
		${domain_uncap}.setMDF_K_IP(RG_K_IP);
		
		return (Integer) ${service_uncap}.insert(${domain_uncap});
	}

	@RemoteMethod
	public boolean update${domainClass}(${domainClass} ${domain_uncap}) throws Exception {
		HttpServletRequest request = WebContextFactory.get().getHttpServletRequest();
		UsrMngr usrMngr = (UsrMngr) request.getSession().getAttribute("managerSession");
		String RG_K_IP = request.getRemoteAddr();
		String RG_D = fdfDate.format(Calendar.getInstance());
		String RG_TM = fdfTime.format(Calendar.getInstance());

		${domain_uncap}.setMDF_K_SEQ_N(${domain_uncap}.getMNGR_SEQ_N());
		${domain_uncap}.setMDF_D(RG_D);
		${domain_uncap}.setMDF_TM(RG_TM);
		${domain_uncap}.setMDF_K_IP(RG_K_IP);
		
		return ${service_uncap}.update(${domain_uncap});
	}

	@RemoteMethod
	public boolean deleteForList(Integer[] keys) throws Exception {
		for (Integer key : keys) {
			${service_uncap}.delete(key);
		}
		return true;
	}

}
