#set($domain_cap = "$domainClass")
#set($domain_uncap = "$domain_cap.substring(0,1).toLowerCase()$domain_cap.substring(1)")
#set($domainSearchVO_cap = "$domainSearchVoClass")
#set($domainSearchVO_uncap = "$domainSearchVO_cap.substring(0,1).toLowerCase()$domainSearchVO_cap.substring(1)")
#set($service_cap = "$serviceClass")
#set($service_uncap = "$service_cap.substring(0,1).toLowerCase()$service_cap.substring(1)")
#set($tableName = $model.name)
#set($tbName_cap = $model.javaName)
#set($tbName_uncap = $model.fieldName)
#set($queryName = $tableName.replaceAll("_",""))
#set($queryName = "$queryName.substring(0,1).toUpperCase()$queryName.substring(1).toLowerCase()")
#set($pks = $model.primaryKeys)
#set($pk = $listTool.get($pks, 0))
#set($pk_cap = $pk.javaName)
#set($pk_uncap = $pk.fieldName)
#foreach( $item in $primaryKey.split(":") )
	#set($ret = $pk_cap.add("$item.substring(0,1).toUpperCase()$item.substring(1).toLowerCase()"))
	#set($ret = $pk_uncap.add($item))
#end

#if(${controllerPackage_package} != "")
package ${controllerPackage_package};
#end

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.time.FastDateFormat;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Order;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import kr.go.nmsc.common.exception.DataNotFoundException;
import kr.go.nmsc.common.util.Token;
import kr.go.nmsc.common.util.SearchUtil;

import ${domainPackage_package}.${domain_cap};
import ${domainSearchVoPackage_package}.${domainSearchVO_cap};
import ${servicePackage_package}.${serviceClass};

/**
 * File Name    : ${controllerClass}.java
 * Author       :#if($author) $author #else admin #end

 * Created on ${date}
 *
 * Copyright(c) 2010 NMSC Co., Ltd. All rights reserved.
 */

@Controller
public class ${controllerClass} {
	
	private static final Log logger = LogFactory.getLog(${controllerClass}.class);
	private static final FastDateFormat fdfDate = FastDateFormat.getInstance("yyyyMMdd");
	private static final FastDateFormat fdfTime = FastDateFormat.getInstance("HHmmss");
	
	@Autowired
	private ${service_cap} ${service_uncap};
	
	@RequestMapping({"${requestPath}/select.do", "${requestPath}/iframe/select.do"})
	public ModelAndView listHandler(HttpServletRequest request, HttpServletResponse response, @ModelAttribute("${domain_uncap}") ${domain_cap} ${domain_uncap}, @ModelAttribute("${domainSearchVO_uncap}") ${domainSearchVO_cap} searchVO) throws Exception {

		//전체개수
		searchVO.setTOTAL_ITEM_COUNT(${service_uncap}.getTotalCount());
		
		DetachedCriteria criteria = SearchUtil.getDetachedCriteria(searchVO, ${domain_cap}.class);
		searchVO.setITEM_COUNT(${service_uncap}.getCount(criteria));
		
		//정렬
		if (StringUtils.isNotEmpty(searchVO.getOC())) {
			if (StringUtils.equals(searchVO.getORDER(), "desc")) {
				criteria.addOrder(Order.asc(searchVO.getOC()));
			} else {
				criteria.addOrder(Order.desc(searchVO.getOC()));
			}
		} else {
			criteria.addOrder(Order.desc("${pk.name}"));
		}		
		
		List<${domain_cap}> ${domain_uncap}List = ${service_uncap}.getPagedList(criteria, searchVO.getPAGER_OFFSET(), searchVO.getMAX_PAGE_ITEMS());

		ModelAndView mav = new ModelAndView();
		mav.setViewName("jsp/${mode}/contents/${tbName_uncap}/list");
		mav.addObject("model", ${domain_uncap});
		mav.addObject("${domain_uncap}List", ${domain_uncap}List);
		mav.addObject("searchVO", searchVO);
		return mav;
	}

	@RequestMapping({"${requestPath}/info.do", "${requestPath}/iframe/info.do"})
	public ModelAndView viewHandler(HttpServletRequest request, HttpServletResponse response, @ModelAttribute("${domain_uncap}") ${domain_cap} ${domain_uncap}, @ModelAttribute("${domainSearchVO_uncap}") ${domainSearchVO_cap} searchVO) throws Exception {

		${domain_uncap} = ${service_uncap}.getInfoBySeq(${domain_uncap}.get${pk.name}());
		if (${domain_uncap} == null) {
			throw new DataNotFoundException();
		}
		ModelAndView mav = new ModelAndView();
		mav.setViewName("jsp/${mode}/contents/${tbName_uncap}/info");
		mav.addObject("model", ${domain_uncap});
		mav.addObject("searchVO", searchVO);
		return mav;
	}

	@RequestMapping({"${requestPath}/insertForm.do", "${requestPath}/iframe/insertForm.do"})
	public ModelAndView insertFormHandler(HttpServletRequest request, HttpServletResponse response, @ModelAttribute("${domain_uncap}") ${domain_cap} ${domain_uncap}, @ModelAttribute("${domainSearchVO_uncap}") ${domainSearchVO_cap} searchVO) throws Exception {

		ModelAndView mav = new ModelAndView();
		mav.setViewName("jsp/${mode}/contents/${tbName_uncap}/insert");
		mav.addObject("formType", "insertForm");
		mav.addObject("model", ${domain_uncap});
		mav.addObject("searchVO", searchVO);
		return mav;
	}

	@RequestMapping({"${requestPath}/updateForm.do", "${requestPath}/iframe/updateForm.do"})
	public ModelAndView updateFormHandler(HttpServletRequest request, HttpServletResponse response, @ModelAttribute("${domain_uncap}") ${domain_cap} ${domain_uncap}, @ModelAttribute("${domainSearchVO_uncap}") ${domainSearchVO_cap} searchVO) throws Exception {

		${domain_uncap} = ${service_uncap}.getInfoBySeq(${domain_uncap}.get${pk.name}());
		if (${domain_uncap} == null) {
			throw new DataNotFoundException();
		}

		ModelAndView mav = new ModelAndView();
		mav.setViewName("jsp/${mode}/contents/${tbName_uncap}/update");
		mav.addObject("formType", "updateForm");
		mav.addObject("model", ${domain_uncap});
		mav.addObject("searchVO", searchVO);
		return mav;
	}
}
