#set ($d = "$")
#set($tableName = $model.name)
#set($columns = $model.fields)
#set($primaryKeys = $model.primaryKeys)
#set($pks = $model.primaryKeys)
#set($pk = $listTool.get($pks, 0))
#set($pk_cap = $pk.javaName)
#set($pk_uncap = $pk.fieldName)
#set($pk_column = $listTool.get($primaryKeys,0))
#set($domain_cap = "$domainClass")
#set($domain_uncap = "$domain_cap.substring(0,1).toLowerCase()$domain_cap.substring(1)")
##===================================
#set($columns = $model.fields)
#set ($nonPkColumns = [])
#foreach($column in $columns)
#if ($column.name != "created_datetime" && $column.name != "modified_datetime" && $column.name != "created_user_id" && $column.name != "modified_user_id")
#set($isPk = false)
#foreach($pk in $pks)
#if ($column.fieldName==$pk.fieldName)
#set($isPk = true)
#end
#end
#if ($isPk == false)
#set ($swallow = $nonPkColumns.add($column))
#end
#end
#end
##===================================
<template>
  <v-card class="pb-1">
    <base-list-search-box
      :title="pageTitle"
      :search-keys="searchKeys"
      :search-key="searchCondition.searchKey"
      :search-keyword="searchCondition.searchKeyword"
      @on-search="search"
    />

    <base-list-data-table
      :headers="headers"
      :search-condition="searchCondition"
      :search-result="searchResult"
      @on-change-search-condition="changeSeachCondition"
      @on-go-update-form="goUpdateForm"
      @on-delete-item="deleteItem"
    />

    <base-list-pagination
      :page="searchCondition.page"
      :total-elements="searchResult.totalElements"
      :total-pages="searchResult.totalPages"
      :total-visible="7"
      @on-change-page="
        page => {
          searchCondition.page = page;
        }
      "
    />
    <base-list-create-button @on-go-create-form="goCreateForm" />
  </v-card>
</template>

<script lang="ts">
import { DataTableHeader, SearchCondition, SearchKey } from 'common';
import { ${domain_cap} } from '${moduleKebabName}';
import { assign } from 'lodash-es';
import com from '~/assets/ts/com';

export default {
  data() {
    return {
      pageTitle: this.${d}t('${domain_uncap}.modelName') + ' ' + this.${d}t('list'),
      loading: false,
      searchKeys: [
#foreach($column in $nonPkColumns)
        {
          key: '${column.fieldName}',
          name: this.${d}t('${domain_uncap}.${column.fieldName}'),
        },
#end
      ] as Array<SearchKey>,
      searchCondition: com.defaultSearchCondition(),
      searchResult: com.defaultSearchResult<${domain_cap}>(),

      headers: [
#foreach($column in $nonPkColumns)
        {
          text: this.${d}t('${domain_uncap}.${column.fieldName}'),
          value: '${column.fieldName}',
          width: 'auto',
          align: 'center',
          sortable: true,
        },
#end
        {
          text: this.${d}t('manage'),
          value: 'manage',
          width: 'auto',
          align: 'center',
          sortable: false,
        },
      ] as Array<DataTableHeader>,
    };
  },
  computed: {
    computedSearchCondition() {
      return assign({}, this.searchCondition);
    },
  },
  watch: {
    computedSearchCondition: {
      handler(curr, prev) {
        if (com.isChangedSearchCondition(curr, prev)) {
          this.fetch();
        }
      },
      deep: true,
    },
  },
  created() {
    this.searchCondition = com.convertQueryToSearchCondition(this.${d}route.query, this.searchCondition);
  },
  mounted() {
    this.fetch();
  },
  methods: {
    search(searchCondition: SearchCondition) {
      this.searchCondition.page = 1;
      this.searchCondition.searchKey = searchCondition.searchKey;
      this.searchCondition.searchKeyword = searchCondition.searchKeyword;
    },
    changeSeachCondition(sc) {
      this.searchCondition = sc;
    },
    async fetch(sc?: SearchCondition) {
      this.loading = true;
      this.searchCondition = assign(this.searchCondition, sc);

      const result = await this.${d}${domain_uncap}Api.find${domain_cap}s(
        this.searchCondition.searchKey,
        this.searchCondition.searchKeyword,
        this.searchCondition.sortBy,
        this.searchCondition.sortDesc,
        this.searchCondition.page - 1,
        this.searchCondition.size
      );
      this.searchResult = assign(this.searchResult, result);

      this.loading = false;
    },
    goCreateForm() {
      this.${d}router.push({
        path: '/${moduleKebabName}/create',
        query: com.convertSearchConditionToQuery(this.searchCondition),
      });
    },
    goUpdateForm(item) {
      this.${d}router.push({
        path: `/${moduleKebabName}/update`,
        query: {
          id: item.id,
          ...com.convertSearchConditionToQuery(this.searchCondition),
        },
      });
    },
    async deleteItem(item) {
      const result = await this.${d}confirm(this.${d}t('areYouWantDelete'));
      if (result) {
        this.${d}showProgressBar();
        await this.${d}${domain_uncap}Api.delete${domain_cap}(item.id);
        this.${d}hideProgressBar();
        await this.fetch(com.defaultSearchCondition());
      }
    },
  },
};
</script>

<style lang="scss" scoped></style></style>
