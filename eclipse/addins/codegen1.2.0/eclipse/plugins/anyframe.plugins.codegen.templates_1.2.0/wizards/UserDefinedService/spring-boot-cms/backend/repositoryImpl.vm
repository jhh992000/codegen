#set($domain_cap = "$domainClass")
#set($domain_uncap = "$domain_cap.substring(0,1).toLowerCase()$domain_cap.substring(1)")
#set($repositoryFile_uncap = "$repositoryFile.substring(0,1).toLowerCase()$repositoryFile.substring(1)")
#set($tableName = $model.name)
#set($columns = $model.fields)
#set($queryName = $tableName.replaceAll("_",""))
#set($queryName = "$queryName.substring(0,1).toUpperCase()$queryName.substring(1).toLowerCase()")
#set($pks = $model.primaryKeys)
#set($pk = $listTool.get($pks, 0))
#set($pk_cap = $pk.javaName)
#set($pk_uncap = $pk.fieldName)
#foreach( $item in $primaryKey.split(":") )
    #set($ret = $pk_cap.add("$item.substring(0,1).toUpperCase()$item.substring(1).toLowerCase()"))
    #set($ret = $pk_uncap.add($item))
#end
##===================================
#if(${repositoryPackage_package} != "")
package ${repositoryPackage_package};
#end

import com.querydsl.core.BooleanBuilder;
import com.querydsl.core.types.Order;
import com.querydsl.core.types.OrderSpecifier;
import com.querydsl.core.types.dsl.Expressions;
import com.querydsl.jpa.impl.JPAQueryFactory;
import lombok.RequiredArgsConstructor;
import me.huneea.springbootcms.common.domain.CommonCustomRepository;
import ${dtoPackage_package}.${searchDtoFile};
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.support.PageableExecutionUtils;

import java.util.ArrayList;
import java.util.List;

import static org.springframework.util.StringUtils.hasText;

@RequiredArgsConstructor
public class ${repositoryImplFile} implements CommonCustomRepository<${domain_cap}, ${searchDtoFile}> {

    private static final Q${domain_cap} ${domain_uncap} = Q${domain_cap}.${domain_uncap};
    private final JPAQueryFactory queryFactory;

    @Override
    public Page<${domain_cap}> findPagedDatas(${searchDtoFile} condition, Pageable pageable) {
        List<${domain_cap}> content = queryFactory.selectFrom(${domain_uncap})
                .where(getBooleanBuilder(condition))
                .orderBy(createOrderSpecifier(condition))
                .offset(pageable.getOffset())
                .limit(pageable.getPageSize())
                .fetch();

        return PageableExecutionUtils.getPage(content, pageable, () -> getCount(condition));
    }

    private OrderSpecifier[] createOrderSpecifier(${searchDtoFile} condition) {
        List<OrderSpecifier> orderSpecifiers = new ArrayList<>();

        if (condition.getSortBy() == null) {
            orderSpecifiers.add(new OrderSpecifier(Order.DESC, ${domain_uncap}.id));
        } else {
            String[] arraySortBy = condition.getSortBy();
            boolean[] arraySortDesc = condition.getSortDesc();
            for (int i = 0; i < arraySortBy.length; i++) {
                String sortBy = arraySortBy[i];
                boolean sortDesc = arraySortDesc[i];
                orderSpecifiers.add(new OrderSpecifier(sortDesc ? Order.DESC : Order.ASC, Expressions.stringPath(${domain_uncap}, sortBy)));
            }
        }

        return orderSpecifiers.toArray(new OrderSpecifier[orderSpecifiers.size()]);
    }

    private Long getCount(${searchDtoFile} condition) {
        return queryFactory.select(${domain_uncap}.count())
                .from(${domain_uncap})
                .where(getBooleanBuilder(condition))
                .fetchOne();
    }

    private static BooleanBuilder getBooleanBuilder(${searchDtoFile} condition) {
        BooleanBuilder builder = new BooleanBuilder();
        
#foreach($column in $columns)
        if (hasText(condition.get${column.javaName}())) {
            builder.and(${domain_uncap}.${column.fieldName}.contains(condition.get${column.javaName}()));
        }
#end

        return builder;
    }
}