#set($domain_cap = "$domainClass")
#set($postfixCutIndex =  $domain_cap.length() - 2)
#set($postfix = "$domain_cap.substring($postfixCutIndex,$domain_cap.length())")
#if($postfix.equals("VO"))
#set($domainName = "$domain_cap.substring(0,$postfixCutIndex)")
#else
#set($domainName = "$domain_cap")
#end
#set($domainName_uncap = "$domainName.substring(0,1).toLowerCase()$domainName.substring(1)")
#set($domain_uncap = "$domain_cap.substring(0,1).toLowerCase()$domain_cap.substring(1)")
#set($serviceClass_uncap = "$serviceClass.substring(0,1).toLowerCase()$serviceClass.substring(1)")
#set($tableName = $model.name)
#set($queryName = $tableName.replaceAll("_",""))
#set($queryName = "$queryName.substring(0,1).toUpperCase()$queryName.substring(1).toLowerCase()")
#set($primaryKeys = $model.primaryKeys)
#set($pks = $model.primaryKeys)
#set($pk = $listTool.get($pks, 0))
#set($pk_cap = $pk.javaName)
#set($pk_uncap = $pk.fieldName)
#foreach( $item in $primaryKey.split(":") )
	#set($ret = $pk_cap.add("$item.substring(0,1).toUpperCase()$item.substring(1).toLowerCase()"))
	#set($ret = $pk_uncap.add($item))
#end
##===================================
#if(${serviceImplPackage_package} != "")
package ${serviceImplPackage_package};
#end

import java.util.List;
import javax.annotation.Resource;
import org.springframework.stereotype.Service;
import egovframework.rte.fdl.cmmn.AbstractServiceImpl;
import ${servicePackage_package}.${serviceClass};
import ${domainPackage_package}.${domain_cap};

/**
 * 프로그램 파일명 : ${serviceImplClass}.java
 * 
 * 프로그램 설명 : $tableName 테이블과 관련된 업무처리용 Service Implement 클래스
 * 
 * 작 성 자 : ${writerName}
 * 
 * 작 성 일 : ${writeDate}
 * 
 * Copyright(c) 2014 DAEYOON Co. Ltd. All rights reserved.
 */
@Service("${serviceClass_uncap}")
public class ${serviceImplClass} extends AbstractServiceImpl implements ${serviceClass} {

	@Resource(name = "${daoClass_uncap}")
	private ${daoClass} ${daoClass_uncap};
#if($primaryKeys.size() == 1)

	public int select${domainName}NextId() throws Exception {
		return ${daoClass_uncap}.select${domainName}NextId();
	}
#elseif($primaryKeys.size() > 1)
	
	public int select${domainName}NextId(${domain_cap} ${domain_uncap}) throws Exception {
		return ${daoClass_uncap}.select${domainName}NextId(${domain_uncap});
	}
#end
#if($primaryKeys.size() > 0)

	public ${domainClass} select${domainName}(#if($pks.size() > 0)#set($i = 1)#foreach($primaryKey in $pks)#if ($primaryKey.type=="INT" || $primaryKey.type=="DOUBLE" || $primaryKey.type=="FLOAT" || $primaryKey.type=="NUMBER" || $primaryKey.type=="int" || $primaryKey.type=="double" || $primaryKey.type=="float" || $primaryKey.type=="number")Integer $primaryKey.fieldName#else$primaryKey.javaType.replaceAll("java.lang.", "") $primaryKey.fieldName#end#if( $i < $pks.size() ), #end#set($i = $i + 1)#end#end) throws Exception {
		${domainClass} ${domain_uncap} = new ${domainClass}();
#foreach($primaryKey in $primaryKeys)
		${domain_uncap}.set$primaryKey.fieldName.substring(0,1).toUpperCase()$primaryKey.fieldName.substring(1)(${primaryKey.fieldName});
#end
		return ${daoClass_uncap}.select${domainName}(${domain_uncap});
	}
#end

	public ${domain_cap} select${domainName}(${domain_cap} ${domain_uncap}) throws Exception {
		return ${daoClass_uncap}.select${domainName}(${domain_uncap});
	}

	public List<${domain_cap}> select${domainName}AllList(${domain_cap} ${domain_uncap}) throws Exception {
		return ${daoClass_uncap}.select${domainName}AllList(${domain_uncap});
	}

	public List<${domain_cap}> select${domainName}List(${domain_cap} ${domain_uncap}) throws Exception {
		return ${daoClass_uncap}.select${domainName}List(${domain_uncap});
	}

	public int select${domainName}TotCnt(${domain_cap} ${domain_uncap}) throws Exception {
		return ${daoClass_uncap}.select${domainName}TotCnt(${domain_uncap});
	}

	public ${domain_cap} insert${domainName}(${domain_cap} ${domain_uncap}) throws Exception {
		return ${daoClass_uncap}.insert${domainName}(${domain_uncap});
	}

	public int update${domainName}(${domain_cap} ${domain_uncap}) throws Exception {
		return ${daoClass_uncap}.update${domainName}(${domain_uncap});
	}
#if($primaryKeys.size() > 0)

	public Integer delete${domainName}(#if($pks.size() > 0)#set($i = 1)#foreach($primaryKey in $pks)#if ($primaryKey.type=="INT" || $primaryKey.type=="DOUBLE" || $primaryKey.type=="FLOAT" || $primaryKey.type=="NUMBER" || $primaryKey.type=="int" || $primaryKey.type=="double" || $primaryKey.type=="float" || $primaryKey.type=="number")Integer $primaryKey.fieldName#else$primaryKey.javaType.replaceAll("java.lang.", "") $primaryKey.fieldName#end#if( $i < $pks.size() ), #end#set($i = $i + 1)#end#end) throws Exception {
		${domainClass} ${domain_uncap} = new ${domainClass}();
#foreach($primaryKey in $primaryKeys)
		${domain_uncap}.set$primaryKey.fieldName.substring(0,1).toUpperCase()$primaryKey.fieldName.substring(1)(${primaryKey.fieldName});
#end
		return ${daoClass_uncap}.delete${domainName}(${domain_uncap});
	}
#end

	public int delete${domainName}(${domain_cap} ${domain_uncap}) throws Exception {
		return ${daoClass_uncap}.delete${domainName}(${domain_uncap});
	}

}
